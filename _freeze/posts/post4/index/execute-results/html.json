{
  "hash": "e01e66f86146dcb5731f862ed9b12e9b",
  "result": {
    "markdown": "---\ntitle: \"Understanding Classification Metrics: ROC, PR, and Confusion Matrix\"\nauthor: \"Riley Rudd\"\ndate: \"2023-12-6\"\ncategories: [machine learning]\n---\n\nClassification is a supervised, meaning labels are given, learning method where a model attempts to predict the correct label of a given input data sample. The models are trained using training data, and then is evaluated and corrected before being used to make predictions on new data. For example, a classification model could be used to detect whether a tumor is cancerous or not based on input data.\n\n### Types of Classification Tasks in Machine Learning\n\n-   Binary classification: The goal here is to determine whether input data is one or another categories. As an example, a model may want to determine whether an email is either spam or not spam.\n\n-   Multi-class classification: With this category, the goal is to determine what the input data is between at least two, but possibly more, categories. An example could be determining what category a flower falls into between various types of flowers.\n\n-   Multi-label classification: These tasks attempt to predict 0 or more classes for each input. An input can have more than one label.\n\n### Issues Faced in Classification\n\n-   Imbalanced classification: This issue is faced when the training data is unevenly distributed in each class. Certain models are better at handling imbalanced datasets than others, as they are less biased toward predicting classes with highest number of observations.\n\n-   Over and Under Fitting: overfitting occurs when the model learns the training data too well, gathering noise and performs poorly when given new data. However, underfitting models are too simple and fail to capture underlying patterns in data.\n\n-   Noise in Data: Noisy data, with errors or irrelevant information can impact the performance of a classification model. Cleaning the data properly is important to avoid this.\n\n-   High Dimensionality: Too many features in a dataset causes a model\\'s performance to degrade due to the curse of dimensionality. There are techniques, like principal component analysis, which can help to reduce dimensions while retaining underlying patterns.\n\n### Types of Classification in Machine Learning\n\n-   Lazy Learners: these models store training data and wait for testing data to appear -- when it does, classification is conducted based on most related training data. More time is spent on predicting than training. An example of a lazy learner algorithm is the K-nearest neighbor algorithm.\n\n-   Eager Learners: These models construct a classification model on given training data before testing data is entered. These models take more time to train and less time to predict.\n\n### Evaluating Performance\n\n-   Receiver Operating Characteristic (ROC) curve: This is a graphical representation of a classifier\\'s ability to distinguish between classes by varying the decision threshold. It plots the sensitivity against the false positive rate across various threshold values. Classifiers with higher area under the curve are deemed more effective.\n\n-   Precision Recall (PR) Curve: Valuable in imbalanced datasets, the PR curve focuses on the trade-off between precision and recall. It illustrates how well a classifier can identify positive instances while maintaining precision. The Area Under the PR Curve (AUC-PR) provides a comprehensive metric for evaluating performance.\n\n-   Confusion matrix: The confusion matrix offers a breakdown of a classifier's performance, categorizing predictions into true positives, true negatives, false positives, and false negatives. From the confusion matrix, essential metrics like accuracy, precision, recall, and the F1 score can be derived, providing a nuanced understanding of the model's strengths and weaknesses.\n\n### Classification Demonstration\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import roc_curve, auc, precision_recall_curve, confusion_matrix\nimport matplotlib.pyplot as plt\n\n#generate synthetic data, features, and labels (binary)\nnp.random.seed(42)\nX = np.random.rand(1000, 5)\ny = np.random.randint(2, size=1000)\n\n#train-test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Using a Random Forest Classifier as an example\nclf = RandomForestClassifier(n_estimators=100, random_state=42)\nclf.fit(X_train, y_train)\n\n# Make predictions on the test set\ny_pred = clf.predict(X_test)\ny_prob = clf.predict_proba(X_test)[:, 1]\nfpr, tpr, _ = roc_curve(y_test, y_prob)\nroc_auc = auc(fpr, tpr)\nprecision, recall, _ = precision_recall_curve(y_test, y_prob)\npr_auc = auc(recall, precision)\n\n# Generate confusion matrix\nconf_matrix = confusion_matrix(y_test, y_pred)\n```\n:::\n\n\n### Visualize Results\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Plot ROC Curve\nplt.figure(figsize=(10, 5))\nplt.subplot(1, 2, 1)\nplt.plot(fpr, tpr, color='darkorange', lw=2, label=f'AUC = {roc_auc:.2f}')\nplt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic (ROC) Curve')\nplt.legend(loc='lower right')\n\n# Plot PR Curve\nplt.subplot(1, 2, 2)\nplt.plot(recall, precision, color='blue', lw=2, label=f'AUC = {pr_auc:.2f}')\nplt.xlabel('Recall (Sensitivity)')\nplt.ylabel('Precision')\nplt.title('Precision-Recall (PR) Curve')\nplt.legend(loc='lower left')\n\nplt.tight_layout()\nplt.show()\n\n# Display Confusion Matrix\nprint(\"Confusion Matrix:\")\nprint(conf_matrix)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-1.png){width=950 height=470}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix:\n[[37 62]\n [45 56]]\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}